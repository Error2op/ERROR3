/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Intent } from "./Intent";
import { IntentCountArgs } from "./IntentCountArgs";
import { IntentFindManyArgs } from "./IntentFindManyArgs";
import { IntentFindUniqueArgs } from "./IntentFindUniqueArgs";
import { DeleteIntentArgs } from "./DeleteIntentArgs";
import { IntentService } from "../intent.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Intent)
export class IntentResolverBase {
  constructor(
    protected readonly service: IntentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Intent",
    action: "read",
    possession: "any",
  })
  async _intentsMeta(
    @graphql.Args() args: IntentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Intent])
  @nestAccessControl.UseRoles({
    resource: "Intent",
    action: "read",
    possession: "any",
  })
  async intents(@graphql.Args() args: IntentFindManyArgs): Promise<Intent[]> {
    return this.service.intents(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Intent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Intent",
    action: "read",
    possession: "own",
  })
  async intent(
    @graphql.Args() args: IntentFindUniqueArgs
  ): Promise<Intent | null> {
    const result = await this.service.intent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Intent)
  @nestAccessControl.UseRoles({
    resource: "Intent",
    action: "delete",
    possession: "any",
  })
  async deleteIntent(
    @graphql.Args() args: DeleteIntentArgs
  ): Promise<Intent | null> {
    try {
      return await this.service.deleteIntent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
